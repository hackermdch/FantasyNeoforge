plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets {
    main.resources { srcDir 'src/generated/resources' }
    testmod {
        compileClasspath += main.output
    }
}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    addModdingDependenciesTo sourceSets.testmod

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        testClient {
            client()
            sourceSet = sourceSets.testmod
            mods.set {
                container(net.neoforged.moddevgradle.dsl.ModModel.class).configure {
                    "${mod_id}" {
                        sourceSet(sourceSets.main)
                    }
                    "testmod" {
                        sourceSet(sourceSets.testmod)
                    }
                }.iterator()
            }
            systemProperty 'neoforge.enabledGameTestNamespaces', 'testmod'
        }

        testServer {
            server()
            sourceSet = sourceSets.testmod
            mods.set {
                container(net.neoforged.moddevgradle.dsl.ModModel.class).configure {
                    "${mod_id}" {
                        sourceSet(sourceSets.main)
                    }
                    "testmod" {
                        sourceSet(sourceSets.testmod)
                    }
                }.iterator()
            }
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', 'testmod'
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neo_version,
                             neo_version_range      : neo_version_range,
                             loader_version_range   : loader_version_range,
                             mod_id                 : mod_id,
                             mod_name               : mod_name,
                             mod_license            : mod_license,
                             mod_version            : mod_version,
                             mod_authors            : mod_authors,
                             mod_description        : mod_description]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('fantasy', MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
